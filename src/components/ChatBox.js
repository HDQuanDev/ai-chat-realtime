import React, { useRef, useEffect } from 'react';
import PropTypes from 'prop-types';
import { marked } from 'marked';

const ChatBox = ({ messageHistory, speakText, copyTextToClipboard, stripHTML, escapeHtml }) => {
  const messagesEndRef = useRef(null);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  useEffect(scrollToBottom, [messageHistory]);

  // ƒê·∫£m b·∫£o messageHistory lu√¥n l√† m·ªôt m·∫£ng
  if (!Array.isArray(messageHistory)) {
    messageHistory = [];
  }

  // Tr√≠ch xu·∫•t c√°c ƒëo·∫°n m√£ v√† ch√®n n√∫t "Copy Code"
  const insertCopyButtons = (html) => {
    const codeSnippetRegex = /<pre><code class="language-([a-zA-Z]+)">([\s\S]*?)<\/code><\/pre>/g;
    let match;
    let processedHtml = html;
    
    while ((match = codeSnippetRegex.exec(html)) !== null) {
      const language = match[1];
      const snippet = match[2];
      const codeBlock = match[0];
      const copyButton = `
        <div class="code-container">
          <div class="code-header">
            <span class="code-language">${language}</span>
            <button class="copy-code-button" data-code="${encodeURIComponent(snippet)}">üìã Sao ch√©p m√£</button>
          </div>
          ${codeBlock}
        </div>`;
      processedHtml = processedHtml.replace(codeBlock, copyButton);
    }

    return processedHtml;
  };

  // Th√™m s·ª± ki·ªán click cho c√°c n√∫t "Copy Code"
  useEffect(() => {
    const handleCopyButtonClick = (event) => {
      if (event.target.classList.contains('copy-code-button')) {
        const code = (event.target.getAttribute('data-code'));
        copyTextToClipboard(code);
      }
    };

    document.addEventListener('click', handleCopyButtonClick);

    return () => {
      document.removeEventListener('click', handleCopyButtonClick);
    };
  }, [copyTextToClipboard]);

  return (
    <div id="chat-box">
      {messageHistory.length === 0 ? (
        <div className="message ai-message">
          <div>T√¥i l√† m√¥ h√¨nh ng√¥n ng·ªØ t·ª± nhi√™n ƒë∆∞·ª£c hu·∫•n luy·ªán ƒë·ªÉ tr·∫£ l·ªùi c√°c c√¢u h·ªèi v·ªÅ m·ªçi th·ª©. N·∫øu b·∫°n c√≥ b·∫•t k·ª≥ c√¢u h·ªèi n√†o, h√£y h·ªèi t√¥i!</div>
        </div>
      ) : (
        messageHistory.map((message, index) => {
          const textNoHtml = stripHTML(message.text_display);
          const textNoHtmlEscaped = escapeHtml(textNoHtml);
          const textSpeak = encodeURIComponent(textNoHtmlEscaped);
          let text_display;
          if(message.sender === 'user') {
             text_display = message.text_display.replace(/\n/g, "<br>");
          } else {
             text_display = message.text_display;
          }

          const processedHtml = insertCopyButtons(marked(text_display));

          return (
            <div key={index} className={`message ${message.sender === 'user' ? 'user-message' : 'ai-message'}`}>
              <div dangerouslySetInnerHTML={{ __html: processedHtml }}></div>
              <hr />
              <button onClick={() => speakText(textSpeak)} title='ƒê·ªçc tin nh·∫Øn' alt='ƒê·ªçc tin nh·∫Øn'>üîä Nghe</button>
              <button onClick={() => copyTextToClipboard(textSpeak)} title='Sao ch√©p tin nh·∫Øn' alt='Sao ch√©p tin nh·∫Øn'>üìã Sao Ch√©p</button>
            </div>
          );
        })
      )}
      <div ref={messagesEndRef} />
    </div>
  );
};

ChatBox.propTypes = {
  messageHistory: PropTypes.array.isRequired,
  speakText: PropTypes.func.isRequired,
  copyTextToClipboard: PropTypes.func.isRequired,
  stripHTML: PropTypes.func.isRequired,
  escapeHtml: PropTypes.func.isRequired,
  removeMarkdown: PropTypes.func.isRequired,
};

export default ChatBox;
